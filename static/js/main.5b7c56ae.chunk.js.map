{"version":3,"sources":["helpers/helpers.js","components/cell.jsx","components/table.jsx","App.js","serviceWorker.js","index.js"],"names":["hasCell","cells","clickedCell","length","some","c","hasWinningPosition","winningPosition","playerPosition","every","cell","memo","_ref","i","j","onCellClick","children","className","react_default","a","createElement","onClick","bind","stats","matrixSize","rows","push","map","row","key","concat","Component","src_components_cell","Object","assign","player1","player2","winningPositions","result","position3","position4","position1","position2","getWinningPositions","App","_useState","useState","_useState2","slicedToArray","player","setPlayer","_useState3","_useState4","setStats","_useState5","_useState6","clickedCells","setClickedCells","_useState7","_useState8","gameOver","setGameOver","_useState9","_useState10","setWinningPosition","components_table","newClickedCells","slice","newStats","pos","isPlayerWon","res","forEach","getWinningPosition","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5b7c56ae.chunk.js","sourcesContent":["function hasCell(cells, clickedCell) {\r\n  return cells.length !== 0 &&\r\n    cells.some((c) => c[0] === clickedCell[0] && c[1] === clickedCell[1]);\r\n}\r\n\r\nfunction getWinningPositions(matrixSize) {\r\n  let result = [];\r\n  let position3 = [];\r\n  let position4 = [];\r\n\r\n  for (let i = 0; i < matrixSize; i++) {\r\n    let position1 = [];\r\n    let position2 = [];\r\n\r\n    for (let j = 0; j < matrixSize; j++) {\r\n      position1.push([i, j]);\r\n      position2.push([j, i]);\r\n    }\r\n\r\n    result.push(position1);\r\n    result.push(position2);\r\n\r\n    position3.push([i, matrixSize - 1 - i]);\r\n    position4.push([i, i]);\r\n  }\r\n\r\n  result.push(position3);\r\n  result.push(position4);\r\n\r\n  return result;\r\n}\r\n\r\nfunction hasWinningPosition(winningPosition, playerPosition) {\r\n  return winningPosition.every((cell) => hasCell(playerPosition, cell));\r\n}\r\n\r\nfunction isPlayerWon(winningPositions, playerPosition) {\r\n  return winningPositions.some((pos) => {\r\n    return hasWinningPosition(pos, playerPosition);\r\n  });\r\n}\r\n\r\nfunction getWinningPosition(winningPositions, playerPosition) {\r\n  let res = [];\r\n\r\n  winningPositions.forEach((pos) => {\r\n    if (hasWinningPosition(pos, playerPosition)) {\r\n      res = pos;\r\n    }\r\n  });\r\n\r\n  return res;\r\n}\r\n\r\nexport {\r\n  hasCell,\r\n  getWinningPositions,\r\n  hasWinningPosition,\r\n  isPlayerWon,\r\n  getWinningPosition,\r\n}","import React, {memo} from 'react';\r\nimport './cell.css';\r\n\r\nfunction Cell({i, j, onCellClick, children, className}) {\r\n  return (\r\n    <div className={'cell ' + className} onClick={onCellClick.bind(null, i, j)}>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(Cell);","import React, {memo} from 'react';\r\nimport {hasCell} from \"../helpers/helpers\";\r\nimport Cell from \"./cell\";\r\nimport './table.css';\r\n\r\nfunction Table({onCellClick, stats, matrixSize, winningPosition}) {\r\n  let rows = [];\r\n\r\n  for (let i = 0; i < matrixSize; i++) {\r\n    let cells = [];\r\n\r\n    for (let j = 0; j < matrixSize; j++) {\r\n      cells.push({i, j});\r\n    }\r\n\r\n    rows.push(cells);\r\n  }\r\n\r\n  return (\r\n    <div className=\"table\">\r\n      {\r\n        rows.map((row, i) => {\r\n          return (\r\n            <div key={`row_${i}`} className=\"row\">\r\n              {\r\n                row.map((cell) => {\r\n                  let Component = null;\r\n                  let className = '';\r\n                  if (hasCell(stats[0], [cell.i, cell.j])) {\r\n                    className = 'clicked-p-1';\r\n                    Component = <span className=\"cell-value\">X</span>;\r\n                  } else if (hasCell(stats[1], [cell.i, cell.j])) {\r\n                    className = 'clicked-p-2';\r\n                    Component = <span className=\"cell-value\">O</span>;\r\n                  }\r\n                  Component = null;\r\n\r\n                  className += hasCell(winningPosition, [cell.i, cell.j]) ? ' winning' : '';\r\n\r\n                  return (\r\n                    <Cell key={`i_${cell.i}_j_${cell.j}`}\r\n                          className={className}\r\n                          {...cell}\r\n                          onCellClick={onCellClick}>\r\n                      {Component}\r\n                    </Cell>\r\n                  );\r\n                })\r\n              }\r\n            </div>\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(Table);","import React, {useState} from 'react';\nimport './App.css';\n\nimport Table from './components/table';\nimport {\n  getWinningPositions,\n  hasCell,\n  isPlayerWon,\n  getWinningPosition,\n} from './helpers/helpers';\n\nconst matrixSize = 3;\nconst player1 = 0;\nconst player2 = 1;\n\nconst winningPositions = getWinningPositions(matrixSize);\n\nfunction App() {\n  let [player, setPlayer] = useState(player1);\n  let [stats, setStats] = useState([[], []]);\n  let [clickedCells, setClickedCells] = useState([]);\n  let [gameOver, setGameOver] = useState(false);\n  let [winningPosition, setWinningPosition] = useState([]);\n\n  function onClick(i, j) {\n    if (!gameOver) {\n      let cell = [i, j];\n\n      if (!hasCell(clickedCells, cell)) {\n        let newClickedCells = clickedCells.slice();\n        newClickedCells.push(cell);\n        setClickedCells(newClickedCells);\n\n        let newStats = stats.slice();\n        newStats[player].push(cell);\n        setStats(newStats);\n\n        if (newStats[player].length >= 3) {\n          if (isPlayerWon(winningPositions, newStats[player])) {\n            setWinningPosition(getWinningPosition(winningPositions, newStats[player]));\n            setGameOver(true);\n          }\n        }\n\n        if (player === player1) {\n          setPlayer(player2);\n        } else {\n          setPlayer(player1);\n        }\n      }\n    }\n  }\n\n  function startAgain() {\n    setPlayer(player1);\n    setStats([[], []]);\n    setClickedCells([]);\n    setGameOver(false);\n    setWinningPosition([]);\n  }\n\n  return (\n    <div className=\"App\">\n      {\n        gameOver &&\n          <h2 className=\"title\">Player {player} Won!</h2>\n      }\n      <Table onCellClick={onClick}\n             matrixSize={matrixSize}\n             winningPosition={winningPosition}\n             stats={stats}/>\n      {\n        gameOver &&\n        <button className=\"start-btn\" onClick={startAgain}>\n          <span>Start Again!</span>\n        </button>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}