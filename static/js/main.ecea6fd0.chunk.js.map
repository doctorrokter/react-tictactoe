{"version":3,"sources":["helpers/helpers.js","components/cell.jsx","components/table.jsx","helpers/soundBlaster.js","App.js","serviceWorker.js","index.js"],"names":["hasCell","cells","clickedCell","length","some","c","hasWinningPosition","winningPosition","playerPosition","every","cell","memo","_ref","i","j","onCellClick","children","className","react_default","a","createElement","onClick","bind","stats","matrixSize","nobodyWon","rows","push","map","row","key","concat","Component","src_components_cell","Object","assign","soundBlaster","frequency","_this","this","time","arguments","undefined","context","_initAudioContext","oscillator","value","gainNode","gain","Promise","resolve","reject","t","setTimeout","clearTimeout","stop","AudioContext","createOscillator","type","start","createGain","connect","destination","player1","player2","winningPositions","result","position3","position4","position1","position2","getWinningPositions","App","_useState","useState","_useState2","slicedToArray","player","setPlayer","_useState3","_useState4","setStats","_useState5","_useState6","clickedCells","setClickedCells","_useState7","_useState8","gameOver","setGameOver","_useState9","_useState10","setWinningPosition","startAgain","playerWon","components_table","play","newClickedCells","slice","newStats","pos","isPlayerWon","res","forEach","getWinningPosition","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ecea6fd0.chunk.js","sourcesContent":["function hasCell(cells, clickedCell) {\r\n  return cells.length !== 0 &&\r\n    cells.some((c) => c[0] === clickedCell[0] && c[1] === clickedCell[1]);\r\n}\r\n\r\nfunction getWinningPositions(matrixSize) {\r\n  let result = [];\r\n  let position3 = [];\r\n  let position4 = [];\r\n\r\n  for (let i = 0; i < matrixSize; i++) {\r\n    let position1 = [];\r\n    let position2 = [];\r\n\r\n    for (let j = 0; j < matrixSize; j++) {\r\n      position1.push([i, j]);\r\n      position2.push([j, i]);\r\n    }\r\n\r\n    result.push(position1);\r\n    result.push(position2);\r\n\r\n    position3.push([i, matrixSize - 1 - i]);\r\n    position4.push([i, i]);\r\n  }\r\n\r\n  result.push(position3);\r\n  result.push(position4);\r\n\r\n  return result;\r\n}\r\n\r\nfunction hasWinningPosition(winningPosition, playerPosition) {\r\n  return winningPosition.every((cell) => hasCell(playerPosition, cell));\r\n}\r\n\r\nfunction isPlayerWon(winningPositions, playerPosition) {\r\n  return winningPositions.some((pos) => {\r\n    return hasWinningPosition(pos, playerPosition);\r\n  });\r\n}\r\n\r\nfunction getWinningPosition(winningPositions, playerPosition) {\r\n  let res = [];\r\n\r\n  winningPositions.forEach((pos) => {\r\n    if (hasWinningPosition(pos, playerPosition)) {\r\n      res = pos;\r\n    }\r\n  });\r\n\r\n  return res;\r\n}\r\n\r\nexport {\r\n  hasCell,\r\n  getWinningPositions,\r\n  hasWinningPosition,\r\n  isPlayerWon,\r\n  getWinningPosition,\r\n}","import React, {memo} from 'react';\r\nimport './cell.css';\r\n\r\nfunction Cell({i, j, onCellClick, children, className}) {\r\n  return (\r\n    <div className={'cell ' + className} onClick={onCellClick.bind(null, i, j)}>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(Cell);","import React, {memo} from 'react';\r\nimport {hasCell} from \"../helpers/helpers\";\r\nimport Cell from \"./cell\";\r\nimport './table.css';\r\n\r\nfunction Table({onCellClick, stats, matrixSize, winningPosition, nobodyWon}) {\r\n  let rows = [];\r\n\r\n  for (let i = 0; i < matrixSize; i++) {\r\n    let cells = [];\r\n\r\n    for (let j = 0; j < matrixSize; j++) {\r\n      cells.push({i, j});\r\n    }\r\n\r\n    rows.push(cells);\r\n  }\r\n\r\n  return (\r\n    <div className=\"table\">\r\n      {\r\n        rows.map((row, i) => {\r\n          return (\r\n            <div key={`row_${i}`} className=\"row\">\r\n              {\r\n                row.map((cell) => {\r\n                  let Component = null;\r\n                  let className = '';\r\n                  if (hasCell(stats[0], [cell.i, cell.j])) {\r\n                    className = 'clicked-p-1';\r\n                    Component = <span className=\"cell-value\">X</span>;\r\n                  } else if (hasCell(stats[1], [cell.i, cell.j])) {\r\n                    className = 'clicked-p-2';\r\n                    Component = <span className=\"cell-value\">O</span>;\r\n                  }\r\n                  Component = null;\r\n\r\n                  className += hasCell(winningPosition, [cell.i, cell.j]) ? ' winning' : '';\r\n                  className += nobodyWon ? ' flush' : '';\r\n\r\n                  return (\r\n                    <Cell key={`i_${cell.i}_j_${cell.j}`}\r\n                          className={className}\r\n                          {...cell}\r\n                          onCellClick={onCellClick}>\r\n                      {Component}\r\n                    </Cell>\r\n                  );\r\n                })\r\n              }\r\n            </div>\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(Table);\r\n","class SoundBlaster {\r\n  play(frequency, time = 100) {\r\n    if (!this.context) {\r\n      this._initAudioContext();\r\n    }\r\n\r\n    this.oscillator.frequency.value = frequency;\r\n    this.gainNode.gain.value = 1;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      let t = setTimeout(() => {\r\n        clearTimeout(t);\r\n        this.stop();\r\n        resolve();\r\n      }, time);\r\n    });\r\n  }\r\n\r\n  stop() {\r\n    this.gainNode.gain.value = 0;\r\n  }\r\n\r\n  _initAudioContext() {\r\n    this.context = new AudioContext();\r\n\r\n    this.oscillator = this.context.createOscillator();\r\n    this.oscillator.type = 'triangle';\r\n    this.oscillator.start(0);\r\n\r\n    this.gainNode = this.context.createGain();\r\n    this.gainNode.gain.value = 0;\r\n\r\n    this.oscillator.connect(this.gainNode);\r\n    this.gainNode.connect(this.context.destination);\r\n  }\r\n}\r\n\r\nexport default new SoundBlaster();","import React, {useState} from 'react';\r\nimport './App.css';\r\n\r\nimport Table from './components/table';\r\nimport {\r\n  getWinningPositions,\r\n  hasCell,\r\n  isPlayerWon,\r\n  getWinningPosition,\r\n} from './helpers/helpers';\r\nimport soundBlaster from './helpers/soundBlaster';\r\n\r\nconst matrixSize = 3;\r\nconst player1 = 0;\r\nconst player2 = 1;\r\n\r\nconst winningPositions = getWinningPositions(matrixSize);\r\n\r\nfunction App() {\r\n  let [player, setPlayer] = useState(player1);\r\n  let [stats, setStats] = useState([[], []]);\r\n  let [clickedCells, setClickedCells] = useState([]);\r\n  let [gameOver, setGameOver] = useState(false);\r\n  let [winningPosition, setWinningPosition] = useState([]);\r\n\r\n  function onClick(i, j) {\r\n    soundBlaster.play(440);\r\n\r\n    if (!gameOver) {\r\n      let cell = [i, j];\r\n\r\n      if (!hasCell(clickedCells, cell)) {\r\n        let newClickedCells = clickedCells.slice();\r\n        newClickedCells.push(cell);\r\n        setClickedCells(newClickedCells);\r\n\r\n        let newStats = stats.slice();\r\n        newStats[player].push(cell);\r\n        setStats(newStats);\r\n\r\n        if (newStats[player].length >= 3) {\r\n          if (isPlayerWon(winningPositions, newStats[player])) {\r\n            setWinningPosition(getWinningPosition(winningPositions, newStats[player]));\r\n            setGameOver(true);\r\n            return;\r\n          }\r\n        }\r\n\r\n        if (clickedCells.length === ((matrixSize * matrixSize) - 1)) {\r\n          setPlayer(-1);\r\n          setGameOver(true);\r\n          setTimeout(() => {\r\n            startAgain();\r\n          }, 1500);\r\n          return;\r\n        }\r\n\r\n        if (player === player1) {\r\n          setPlayer(player2);\r\n        } else {\r\n          setPlayer(player1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function startAgain() {\r\n    setPlayer(player1);\r\n    setStats([[], []]);\r\n    setClickedCells([]);\r\n    setGameOver(false);\r\n    setWinningPosition([]);\r\n  }\r\n\r\n  let playerWon = gameOver && player !== -1;\r\n  let nobodyWon = player === -1;\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {\r\n        playerWon &&\r\n          <h2 className=\"title\">Player {player + 1} Won!</h2>\r\n      }\r\n      <Table onCellClick={onClick}\r\n             matrixSize={matrixSize}\r\n             winningPosition={winningPosition}\r\n             nobodyWon={nobodyWon}\r\n             stats={stats}/>\r\n      {\r\n        playerWon &&\r\n        <button className=\"start-btn\" onClick={startAgain}>\r\n          <span>Start Again!</span>\r\n        </button>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}